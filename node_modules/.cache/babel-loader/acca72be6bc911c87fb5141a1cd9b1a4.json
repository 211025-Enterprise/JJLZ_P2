{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zdn_8\\\\Desktop\\\\JJLZ_UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zdn_8\\\\Desktop\\\\JJLZ_UI\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport axios from 'axios';\n\nvar AuthenticationService =\n/*#__PURE__*/\nfunction () {\n  function AuthenticationService() {\n    _classCallCheck(this, AuthenticationService);\n\n    this.getLoggedInUserName = function () {\n      var user = sessionStorage.getItem('authenticatedUser');\n      if (user === null) return '';\n      return user;\n    };\n  }\n\n  _createClass(AuthenticationService, [{\n    key: \"executeBasicAuthenticationService\",\n    value: function executeBasicAuthenticationService(username, password) {\n      return axios.get('http://localhost:8080/logged', {\n        headers: {\n          authorization: this.createBasicAuthToken(username, password)\n        }\n      });\n    }\n  }, {\n    key: \"createBasicAuthToken\",\n    value: function createBasicAuthToken(username, password) {\n      return 'Basic ' + window.btoa(username + \":\" + password);\n    }\n  }, {\n    key: \"registerSuccessfulLogin\",\n    value: function registerSuccessfulLogin(username, password) {\n      //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n      //console.log('registerSuccessfulLogin')\n      sessionStorage.setItem('authenticatedUser', username);\n      this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      sessionStorage.removeItem('authenticatedUser');\n    }\n  }, {\n    key: \"isUserLoggedIn\",\n    value: function isUserLoggedIn() {\n      var user = sessionStorage.getItem('authenticatedUser');\n      if (user === null) return false;\n      return true;\n    }\n  }, {\n    key: \"setupAxiosInterceptors\",\n    value: function setupAxiosInterceptors(basicAuthHeader) {\n      var _this = this;\n\n      axios.interceptors.request.use(function (config) {\n        if (_this.isUserLoggedIn()) {\n          config.headers.authorization = basicAuthHeader;\n        }\n\n        return config;\n      });\n    } // registerSuccessfulLogin(username,password){\n    //    // console.log('registerSuccessfulLogin')\n    //     sessionStorage.setItem('authenticatedUser', username);\n    // }\n    // logout() {\n    //     sessionStorage.removeItem('authenticatedUser');\n    // }\n    // isUserLoggedIn() {\n    //     let user = sessionStorage.getItem('authenticatedUser')\n    //     if(user === null) return false\n    //     return true\n    // }\n\n  }]);\n\n  return AuthenticationService;\n}();\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:\\Users\\zdn_8\\Desktop\\JJLZ_UI\\src\\components\\todo\\AuthenticationService.js"],"names":["axios","AuthenticationService","getLoggedInUserName","user","sessionStorage","getItem","username","password","get","headers","authorization","createBasicAuthToken","window","btoa","setItem","setupAxiosInterceptors","removeItem","basicAuthHeader","interceptors","request","use","config","isUserLoggedIn"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IACMC,qB;;;;;;SA8BFC,mB,GAAsB,YAAM;AACxB,UAAIC,IAAI,GAAGC,cAAc,CAACC,OAAf,CAAuB,mBAAvB,CAAX;AACA,UAAGF,IAAI,KAAG,IAAV,EAAgB,OAAO,EAAP;AAChB,aAAOA,IAAP;AACH,K;;;;;sDA/BiCG,Q,EAAUC,Q,EAAU;AAClD,aAAOP,KAAK,CAACQ,GAAN,CAAU,8BAAV,EACH;AAACC,QAAAA,OAAO,EAAE;AAACC,UAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAmCC,QAAnC;AAAhB;AAAV,OADG,CAAP;AAEH;;;yCAEoBD,Q,EAASC,Q,EAAU;AACpC,aAAO,WAAYK,MAAM,CAACC,IAAP,CAAYP,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAnB;AACH;;;4CAEuBD,Q,EAASC,Q,EAAS;AACtC;AACA;AACAH,MAAAA,cAAc,CAACU,OAAf,CAAuB,mBAAvB,EAA4CR,QAA5C;AACA,WAAKS,sBAAL,CAA4B,KAAKJ,oBAAL,CAA0BL,QAA1B,EAAmCC,QAAnC,CAA5B;AACH;;;6BAEQ;AACLH,MAAAA,cAAc,CAACY,UAAf,CAA0B,mBAA1B;AACH;;;qCAEgB;AACb,UAAIb,IAAI,GAAGC,cAAc,CAACC,OAAf,CAAuB,mBAAvB,CAAX;AAEA,UAAGF,IAAI,KAAG,IAAV,EAAgB,OAAO,KAAP;AAChB,aAAO,IAAP;AACH;;;2CAQsBc,e,EAAiB;AAAA;;AAEpCjB,MAAAA,KAAK,CAACkB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,UAACC,MAAD,EAAY;AACR,YAAG,KAAI,CAACC,cAAL,EAAH,EAA0B;AACtBD,UAAAA,MAAM,CAACZ,OAAP,CAAeC,aAAf,GAA+BO,eAA/B;AACH;;AACD,eAAOI,MAAP;AACH,OANL;AAQH,K,CACA;AACD;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAIJ,eAAe,IAAIpB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\nclass AuthenticationService {\n\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get('http://localhost:8080/logged', \n            {headers: {authorization: this.createBasicAuthToken(username,password)}})\n    }\n\n    createBasicAuthToken(username,password) {\n        return 'Basic ' +  window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username,password){\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        //console.log('registerSuccessfulLogin')\n        sessionStorage.setItem('authenticatedUser', username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username,password))\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        \n        if(user===null) return false\n        return true\n    }\n\n    getLoggedInUserName = () => {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user===null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(basicAuthHeader) {\n\n        axios.interceptors.request.use(\n            (config) => {\n                if(this.isUserLoggedIn()) {\n                    config.headers.authorization = basicAuthHeader\n                }\n                return config\n            }\n        )\n    }\n     // registerSuccessfulLogin(username,password){\n    //    // console.log('registerSuccessfulLogin')\n    //     sessionStorage.setItem('authenticatedUser', username);\n    // }\n\n    // logout() {\n    //     sessionStorage.removeItem('authenticatedUser');\n    // }\n\n    // isUserLoggedIn() {\n    //     let user = sessionStorage.getItem('authenticatedUser')\n    //     if(user === null) return false\n    //     return true\n    // }\n\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}