{"ast":null,"code":"// import React, {Component} from 'react'\n// import moment from 'moment'\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\n// import TodoDataService from '../../api/todo/TodoDataService.js'\n// import AuthenticationService from './AuthenticationService.js'\n// class UpdateBalance extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             id : this.props.match.params.id,\n//             description : ''\n//             // targetDate : moment(new Date()).format('YYYY-MM-DD')\n//         }\n//         this.onSubmit = this.onSubmit.bind(this)\n//         this.validate = this.validate.bind(this)\n//     }\n//     componentDidMount() {\n//         if(this.state.id===-1) {\n//             return\n//         }\n//         let username = AuthenticationService.getLoggedInUserName()\n//         TodoDataService.retrieveTodo(username, this.state.id)\n//              .then(response => this.setState({\n//                 description: response.data.description,\n//                 targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n//              }))\n//     }\n//     // validate(values) {\n//     //     let errors = {}\n//     //     if(!values.description) {\n//     //         errors.description = 'Enter a Description'\n//     //     } else if(values.description.length<5) {\n//     //         errors.description = 'Enter atleast 5 Characters in Description'\n//     //     }\n//     //     if(!moment(values.targetDate).isValid()) {\n//     //         errors.targetDate = 'Enter a valid Target Date'\n//     //     }\n//     //     return errors\n//     // }\n//     onSubmit(values) {\n//         let username = AuthenticationService.getLoggedInUserName()\n//         let todo = {\n//             id: this.state.id,\n//             description: values.description,\n//             targetDate: values.targetDate\n//         }\n//         if (this.state.id === -1) {\n//             TodoDataService.createTodo(username, todo)\n//                 .then(() => this.props.history.push('/todos'))\n//         } else {\n//             TodoDataService.updateTodo(username, this.state.id, todo)\n//                 .then(() => this.props.history.push('/todos'))\n//         }\n//         console.log(values);\n//     }\n//     render() {\n//         let {description,targetDate} = this.state\n//         //let targetDate = this.state.targetDate\n//         return (\n//             <div>\n//                 <h1>Todo</h1>\n//                 <div className=\"container\">\n//                     <Formik \n//                         initialValues={{description,targetDate}}\n//                         onSubmit={this.onSubmit}\n//                         validateOnChange={false}\n//                         validateOnBlur={false}\n//                         validate={this.validate}\n//                         enableReinitialize={true}\n//                     >\n//                         {\n//                             (props) => (\n//                                 <Form>\n//                                     <ErrorMessage name=\"description\" component=\"div\" \n//                                                                 className=\"alert alert-warning\"/>\n//                                     <ErrorMessage name=\"targetDate\" component=\"div\" \n//                                                                 className=\"alert alert-warning\"/>\n//                                     <fieldset className=\"form-group\">\n//                                         <label>Description</label>\n//                                         <Field className=\"form-control\" type=\"text\" name=\"description\"/>\n//                                     </fieldset>\n//                                     <fieldset className=\"form-group\">\n//                                         <label>Target Date</label>\n//                                         <Field className=\"form-control\" type=\"date\" name=\"targetDate\"/>\n//                                     </fieldset>\n//                                     <button className=\"btn btn-success\" type=\"submit\">Save</button>\n//                                 </Form>\n//                             )\n//                         }\n//                     </Formik>\n//                 </div>                \n//             </div>\n//         )\n//     }\n// }\n// export default UpdateBalance","map":{"version":3,"sources":["C:\\Users\\zdn_8\\Desktop\\JJLZ_UI\\src\\components\\todo\\UpdateBalance.jsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, {Component} from 'react'\r\n// import moment from 'moment'\r\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\r\n// import TodoDataService from '../../api/todo/TodoDataService.js'\r\n// import AuthenticationService from './AuthenticationService.js'\r\n\r\n// class UpdateBalance extends Component {\r\n\r\n//     constructor(props) {\r\n//         super(props)\r\n\r\n//         this.state = {\r\n//             id : this.props.match.params.id,\r\n//             description : ''\r\n//             // targetDate : moment(new Date()).format('YYYY-MM-DD')\r\n//         }\r\n\r\n//         this.onSubmit = this.onSubmit.bind(this)\r\n//         this.validate = this.validate.bind(this)\r\n\r\n//     }\r\n\r\n//     componentDidMount() {\r\n\r\n//         if(this.state.id===-1) {\r\n//             return\r\n//         }\r\n        \r\n//         let username = AuthenticationService.getLoggedInUserName()\r\n        \r\n//         TodoDataService.retrieveTodo(username, this.state.id)\r\n//              .then(response => this.setState({\r\n//                 description: response.data.description,\r\n//                 targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\r\n//              }))\r\n//     }\r\n\r\n//     // validate(values) {\r\n//     //     let errors = {}\r\n//     //     if(!values.description) {\r\n//     //         errors.description = 'Enter a Description'\r\n//     //     } else if(values.description.length<5) {\r\n//     //         errors.description = 'Enter atleast 5 Characters in Description'\r\n//     //     }\r\n\r\n//     //     if(!moment(values.targetDate).isValid()) {\r\n//     //         errors.targetDate = 'Enter a valid Target Date'\r\n//     //     }\r\n\r\n//     //     return errors\r\n\r\n//     // }\r\n\r\n//     onSubmit(values) {\r\n//         let username = AuthenticationService.getLoggedInUserName()\r\n\r\n//         let todo = {\r\n//             id: this.state.id,\r\n//             description: values.description,\r\n//             targetDate: values.targetDate\r\n//         }\r\n\r\n//         if (this.state.id === -1) {\r\n//             TodoDataService.createTodo(username, todo)\r\n//                 .then(() => this.props.history.push('/todos'))\r\n//         } else {\r\n//             TodoDataService.updateTodo(username, this.state.id, todo)\r\n//                 .then(() => this.props.history.push('/todos'))\r\n//         }\r\n        \r\n//         console.log(values);\r\n//     }\r\n\r\n//     render() {\r\n        \r\n//         let {description,targetDate} = this.state\r\n//         //let targetDate = this.state.targetDate\r\n\r\n//         return (\r\n//             <div>\r\n//                 <h1>Todo</h1>\r\n//                 <div className=\"container\">\r\n//                     <Formik \r\n//                         initialValues={{description,targetDate}}\r\n//                         onSubmit={this.onSubmit}\r\n//                         validateOnChange={false}\r\n//                         validateOnBlur={false}\r\n//                         validate={this.validate}\r\n//                         enableReinitialize={true}\r\n//                     >\r\n//                         {\r\n//                             (props) => (\r\n//                                 <Form>\r\n//                                     <ErrorMessage name=\"description\" component=\"div\" \r\n//                                                                 className=\"alert alert-warning\"/>\r\n//                                     <ErrorMessage name=\"targetDate\" component=\"div\" \r\n//                                                                 className=\"alert alert-warning\"/>\r\n//                                     <fieldset className=\"form-group\">\r\n//                                         <label>Description</label>\r\n//                                         <Field className=\"form-control\" type=\"text\" name=\"description\"/>\r\n//                                     </fieldset>\r\n//                                     <fieldset className=\"form-group\">\r\n//                                         <label>Target Date</label>\r\n//                                         <Field className=\"form-control\" type=\"date\" name=\"targetDate\"/>\r\n//                                     </fieldset>\r\n//                                     <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n//                                 </Form>\r\n//                             )\r\n//                         }\r\n//                     </Formik>\r\n                \r\n//                 </div>                \r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// export default UpdateBalance"]},"metadata":{},"sourceType":"module"}